--- Codes1.1/Codes2D/MakeCylinder2D.m	2009-08-10 07:33:48.000000000 -0700
+++ MakeCurved2D.m	2013-11-13 17:06:05.000000000 -0800
@@ -1,28 +1,26 @@
-function MakeCylinder2D(faces, ra,xo,yo)
+function MakeCurved2D(faces, curve)
 
-% Function: MakeCylinder2D(faces, ra, xo, yo)
+% Function: MakeCurved2D(faces, curve)
 % Purpose:  Use Gordon-Hall blending with an isoparametric map to modify a list
-%           of faces so they conform to a cylinder of radius r centered at (xo,yo)
+%           of faces so they conform to the curve
+
+% Modifications of MakeCylinder2D from Nodal Discontinuous Galerkin Methods by
+% Jan Hestaven and Tim Warburton
 Globals2D;
 
 NCurveFaces = size(faces,1);
 vflag = zeros(size(VX));
-for n=1:NCurveFaces 
+for n=1:NCurveFaces
 
   % move vertices of faces to be curved onto circle
   k = faces(n,1); f = faces(n,2);
   v1 = EToV(k, f); v2 = EToV(k, mod(f,Nfaces)+1);
 
-  % compute polar angles of start and end face vertices relative to circle center
-  theta1 = atan2(VY(v1)-yo,VX(v1)-xo); 
-  theta2 = atan2(VY(v2)-yo,VX(v2)-xo);
-
-  % move vertices onto circle
-  newx1 = xo + ra*cos(theta1); newy1 = yo + ra*sin(theta1);
-  newx2 = xo + ra*cos(theta2); newy2 = yo + ra*sin(theta2);
+  [newx1 newy1] = curve(VX(v1), VY(v1));
+  [newx2 newy2] = curve(VX(v2), VY(v2));
 
   % update mesh vertex locations
-  VX(v1) = newx1; VX(v2) = newx2; VY(v1) = newy1; VY(v2) = newy2; 
+  VX(v1) = newx1; VX(v2) = newx2; VY(v1) = newy1; VY(v2) = newy2;
 
   % store modified vertex numbers
   vflag(v1) = 1;  vflag(v2) = 1;
@@ -49,23 +47,16 @@
   fr = vr(Fmask(:,f));
   x1 = VX(v1); y1 = VY(v1); x2 = VX(v2); y2 = VY(v2);
 
-  % move vertices at end points of this face to the cylinder
-  theta1 = atan2(y1-yo, x1-xo); theta2 = atan2(y2-yo, x2-xo);
-
-  % check to make sure they are in the same quadrant
-  if ((theta2 > 0) & (theta1 < 0)), theta1 = theta1 + 2*pi; end;
-  if ((theta1 > 0) & (theta2 < 0)), theta2 = theta2 + 2*pi; end;
-  
-  % distribute N+1 nodes by arc-length along edge
-  theta = 0.5*theta1*(1-fr) + 0.5*theta2*(1+fr);
+  % Find the new location of the nodes
+  [newx newy] = curve(x(Fmask(:,f),k), y(Fmask(:,f),k));
 
   % evaluate deformation of coordinates
-  fdx = xo + ra*cos(theta)-x(Fmask(:,f),k); 
-  fdy = yo + ra*sin(theta)-y(Fmask(:,f),k);
-  
+  fdx = newx-x(Fmask(:,f),k);
+  fdy = newy-y(Fmask(:,f),k);
+
   % build 1D Vandermonde matrix for face nodes and volume nodes
   Vface = Vandermonde1D(N, fr);  Vvol  = Vandermonde1D(N, vr);
-  % compute unblended volume deformations 
+  % compute unblended volume deformations
   vdx = Vvol*(Vface\fdx); vdy = Vvol*(Vface\fdy);
 
   % blend deformation and increment node coordinates
